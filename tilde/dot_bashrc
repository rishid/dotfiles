#!/usr/bin/env bash
# -*- mode:shell-script; sh-shell:bash -*-
# ~/.bashrc: executed by bash(1) for non-login shells.

### /etc/bashrc
[ ! -f /etc/bashrc ] || . /etc/bashrc

# If not running interactively, don't do anything
[[ $- == *i* ]] || return 0

### Import Common Settings
[ ! -f "${XDG_CONFIG_HOME:-$HOME/.config}/shell/profile.sh" ] || . "${XDG_CONFIG_HOME:-$HOME/.config}/shell/profile.sh"

# Bash settings
# https://www.gnu.org/software/bash/manual/bashref.html#The-Shopt-Builtin
shopt -s autocd          # Automatically prepend `cd` to directory names.
shopt -s cdspell         # Auto-corrects cd misspellings
shopt -s cmdhist         # Save multi-line commands in history as single line
shopt -s dotglob         # Include dotfiles in pathname expansion
shopt -s expand_aliases  # Expand aliases
shopt -s extglob         # Enable extended pattern-matching features
shopt -s histreedit      # Add failed commands to the bash history
shopt -s histappend      # Append each session's history to $HISTFILE
shopt -s histverify      # Edit a recalled history line before executing
shopt -s no_empty_cmd_completion # Do not attempt to search the PATH for possible completions when
                                 # completion is attempted on an empty line.




# Argument to cd builtin command that is not a directory is assumed to be the name
# of a variable whose value is the directory to change to.
shopt -s cdable_vars




if [[ $DISPLAY ]]; then
	shopt -s checkwinsize  # Update LINES and COLUMNS after each command
fi


# source: http://superuser.com/a/1001014/148993
# is $1 missing from $2 (or PATH) ?
no_path() {
    eval "case :\$${2-PATH}: in *:$1:*) return 1;; *) return 0;; esac"
}
# if $1 exists and is not in path, append it
add_path () {
  [ -d ${1:-.} ] && no_path $* && eval ${2:-PATH}="\$${2:-PATH}:$1"
}
# if $1 exists and is not in path, prepend it
pre_path () {
  [ -d ${1:-.} ] && no_path $* && eval ${2:-PATH}="$1:\$${2:-PATH}"
}
# if $1 is in path, remove it
del_path () {
  no_path $* || eval ${2:-PATH}=`eval echo :'$'${2:-PATH}: |
    sed -e "s;:$1:;:;g" -e "s;^:;;" -e "s;:\$;;"`
}

# list all folders in PATH environment variable more readable (non existent folders in red)
function paths {
  IFS=$':'
  for i in $PATH; do if [ -d $(eval echo $i) ]; then echo $i; else echo -e "\033[0;31m$i\033[0m"; fi; done;
  unset IFS
}

#-----------
# completion
#-----------
# Make sure bash-completion is activated

# File ignore
export FIGNORE=CVS:.svn:.git

if [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
fi



#-------
# prompt
#-------
export PS1="[\[\033[36m\]\u\[\033[37m\]@\[\033[32m\]\h:\[\033[34;1m\]\w\[\033[m\]]$ "

# Save and reload the history after each command finishes
#export PROMPT_COMMAND="history -a; history -c; history -r; $PROMPT_COMMAND"

#if [ -z "$PROMPT_COMMAND" ]; then
#    export PROMPT_COMMAND="history -a";
#else
#    export PROMPT_COMMAND="$PROMPT_COMMAND;history -a";
#fi

# env vars
#export CDPATH=".:~/:~/dev"
export INPUTRC="/etc/inputrc"
export EDITOR="emacs"
export VISUAL="emacs"
export PAGER="less"
export BROWSER="firefox"


# colors for: console, ls, grep, less, man
eval `dircolors -b`
# display grep matches in a color
export GREP_COLOR="1;33"

# start/attach screen session after logging in via ssh
#if [ -n "$SSH_CONNECTION" ] && [ -z "$SCREEN_EXIST" ] && [ "$TERM" != "screen" ] ; then
#  export SCREEN_EXIST=1
#  screen -DR
#fi

if [ -f ~/.bashrc.local ]; then
    . ~/.bashrc.local
fi


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

#
# create temporary scratch directory [inspired by http://ku1ik.com/2012/05/04/scratch-dir.html]
#
export SCRATCH_HOME="$HOME/scratch"
export SCRATCH_TEMP="/private/tmp/scratch-"
[[ -h $SCRATCH_HOME && ! -d $SCRATCH_HOME ]] && rm $SCRATCH_HOME     # delete scratch link if /tmp scratch folder doesn't exist anymore
function scratch_new {
  export SCRATCH_TEMP="/private/tmp/scratch-`date +'%s'`/scratch"    # scratch folder with timestamp within /tmp. will be deleted after system reboot
  mkdir -p $SCRATCH_TEMP                                             # create scratch folder
  ln -nfs $SCRATCH_TEMP $SCRATCH_HOME                                # symlink to scratch folder
  cd $SCRATCH_HOME                                                   # cd into scratch folder
}

function scratch_into {
  if [ -h "$SCRATCH_HOME" ]; then                                    # if symbolic link to SCRATCH_HOME exists
    cd $SCRATCH_HOME
  else
    scratch_new
  fi
}

function scratch_go {                                                # setup a temporary go environment
  if [ -d "src" ] && [ -d "pkg" ] && [ -d "bin" ]; then
    export GOPATH=`pwd`
    export GOBIN="$GOPATH/bin"
    export PATH="$PATH:$GOBIN"
  fi
}

alias s="scratch_into"                                               # cd into current scratch folder or create a new one
alias sn="scratch_new"                                               # new empty scratch folder
alias sg="scratch_go"

#
# start a tiny web server in a separate tmux pane serving the current directory (see ~/bin/www-server)
#
function www {
  if [ -n "$TMUX" ]; then
    tmux splitw -v -p 10 "www-server $@";
    tmux selectp -t 1;
  else
    www-server "$@";
  fi
}


#
# run arbitrary command in separate tmux pane
#
# EXAMPLE
#
#   > _ htop
#   > _ sass --watch .:.
#
function _ {
  tmux splitw -v -p 15 "$@";
  tmux selectp -t 1;
}

# direnv hook
if command -v direnv &> /dev/null; then
  eval "$(direnv hook bash)"
fi
