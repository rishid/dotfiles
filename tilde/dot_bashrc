#!/usr/bin/env bash
# -*- mode:shell-script; sh-shell:bash -*-
# ~/.bashrc: executed by bash(1) for non-login shells.

### /etc/bashrc
[ ! -f /etc/bashrc ] || . /etc/bashrc

# If not running interactively, don't do anything
[[ $- == *i* ]] || return 0

export LANG="en_US"
export LC_ALL="en_US.UTF-8"

### Import Common Settings
[ ! -f "${XDG_CONFIG_HOME:-$HOME/.config}/shell/profile.sh" ] || . "${XDG_CONFIG_HOME:-$HOME/.config}/shell/profile.sh"

# Bash settings
shopt -s cdspell         # Auto-corrects cd misspellings
shopt -s cmdhist         # Save multi-line commands in history as single line
shopt -s dotglob         # Include dotfiles in pathname expansion
shopt -s expand_aliases  # Expand aliases
shopt -s extglob         # Enable extended pattern-matching features
shopt -s histreedit      # Add failed commands to the bash history
shopt -s histappend      # Append each session's history to $HISTFILE
shopt -s histverify      # Edit a recalled history line before executing

if [[ $DISPLAY ]]; then
	shopt -s checkwinsize  # Update LINES and COLUMNS after each command
fi

# Load bash aliases
source "$XDG_CONFIG_HOME/shell/aliases.sh"



### XDG
# Source: # https://wiki.archlinux.org/index.php/XDG_Base_Directory
export XDG_CONFIG_HOME="$HOME/.config"
export XDG_CACHE_HOME="$HOME/.cache"
export XDG_DATA_HOME="$HOME/.local/share"
export XDG_STATE_HOME="$HOME/.local/state"


### Exports
export PATH="/opt/local/bin:$PATH"
export PATH="$HOME/.local/bin:$PATH"
export PATH="$HOME/bin:$PATH"
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib

### Ansible
export ANSIBLE_CONFIG="$XDG_DATA_HOME/ansible/ansible.cfg"
export ANSIBLE_HOME="$XDG_DATA_HOME/ansible"

### bat
export BAT_CONFIG_PATH="$XDG_CONFIG_HOME/bat/config"

### Cargo
export CARGO_HOME="$XDG_DATA_HOME/cargo"
export PATH="$PATH:$CARGO_HOME/bin"

### Docker
# export DOCKER_CONFIG="$XDG_CONFIG_HOME/docker"
# export MACHINE_STORAGE_PATH="$XDG_DATA_HOME/docker-machine"

### Go
# export GOPATH="$XDG_DATA_HOME/go"
# export GO111MODULE=on
# export PATH="$PATH:${GOPATH}/bin"
# if command -v go > /dev/null && which go | grep -q 'asdf' > /dev/null && command -v asdf > /dev/null; then
#   GOROOT="$(asdf where golang)/go"
#   export GOROOT
#   export PATH="$PATH:${GOROOT}/bin"
# elif command -v go > /dev/null && command -v brew > /dev/null; then
#   GOROOT="$(brew --prefix go)/libexec"
#   export GOROOT
#   export PATH="$PATH:${GOROOT}/bin"
# fi

### HTTPie
export HTTPIE_CONFIG_DIR="$XDG_CONFIG_HOME/httpie"

### k9s
export K9SCONFIG="$XDG_CONFIG_HOME/k9s"

### Kube
export KUBECONFIG="$XDG_CONFIG_HOME/kube/config"

### wget
export WGETRC="$XDG_CONFIG_HOME/wget/wgetrc"

### History
# append to HISTFILE when command is typed
# shopt -s histappend
# # Save all lines of a multiple-line command in the same history entry.
# shopt -s cmdhist
# export HISTCONTROL=ignoreboth
# export HISTSIZE=1000000000
# export HISTFILESIZE=$HISTSIZE
# export HISTFILE="${XDG_STATE_HOME}"/bash/history
# export HIST_STAMPS=mm/dd/yyyy
# export HISTTIMEFORMAT="%F %T "
# export HISTIGNORE="&:[bf]g:c:clear:history:exit:q:afk:pwd:* --help"
# export SAVEHIST=50000

### Man pages
export LESS_TERMCAP_mb=$'\e[1;32m'
export LESS_TERMCAP_md=$'\e[1;32m'
export LESS_TERMCAP_me=$'\e[0m'
export LESS_TERMCAP_se=$'\e[0m'
export LESS_TERMCAP_so=$'\e[01;33m'
export LESS_TERMCAP_ue=$'\e[0m'
export LESS_TERMCAP_us=$'\e[1;4;31m'
export LESSHISTFILE=-
export MANPAGER="less -X"

# source: http://superuser.com/a/1001014/148993
# is $1 missing from $2 (or PATH) ?
no_path() {
    eval "case :\$${2-PATH}: in *:$1:*) return 1;; *) return 0;; esac"
}
# if $1 exists and is not in path, append it
add_path () {
  [ -d ${1:-.} ] && no_path $* && eval ${2:-PATH}="\$${2:-PATH}:$1"
}
# if $1 exists and is not in path, prepend it
pre_path () {
  [ -d ${1:-.} ] && no_path $* && eval ${2:-PATH}="$1:\$${2:-PATH}"
}
# if $1 is in path, remove it
del_path () {
  no_path $* || eval ${2:-PATH}=`eval echo :'$'${2:-PATH}: |
    sed -e "s;:$1:;:;g" -e "s;^:;;" -e "s;:\$;;"`
}

# list all folders in PATH environment variable more readable (non existent folders in red)
function paths {
  IFS=$':'
  for i in $PATH; do if [ -d $(eval echo $i) ]; then echo $i; else echo -e "\033[0;31m$i\033[0m"; fi; done;
  unset IFS
}

#-----------
# completion
#-----------
# Make sure bash-completion is activated

# File ignore
export FIGNORE=CVS:.svn:.git

if [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
fi



#-------
# prompt
#-------
export PS1="[\[\033[36m\]\u\[\033[37m\]@\[\033[32m\]\h:\[\033[34;1m\]\w\[\033[m\]]$ "

# Save and reload the history after each command finishes
#export PROMPT_COMMAND="history -a; history -c; history -r; $PROMPT_COMMAND"

#if [ -z "$PROMPT_COMMAND" ]; then
#    export PROMPT_COMMAND="history -a";
#else
#    export PROMPT_COMMAND="$PROMPT_COMMAND;history -a";
#fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# shell options
# https://www.gnu.org/software/bash/manual/bashref.html#The-Shopt-Builtin

# Automatically prepend `cd` to directory names.
shopt -s autocd
# Autocorrect typos in path names when using the `cd` command.
shopt -s cdspell
# Check the window size after each command and, if necessary, update
# the values of `LINES` and `COLUMNS`.
shopt -s checkwinsize
# Argument to cd builtin command that is not a directory is assumed to be the name
# of a variable whose value is the directory to change to.
shopt -s cdable_vars
# Include filenames beginning with a "." in the filename expansion.
shopt -s dotglob
# Use extended pattern matching features.
shopt -s extglob
# Do not attempt to search the PATH for possible completions when
# completion is attempted on an empty line.
shopt -s no_empty_cmd_completion

shopt -s expand_aliases

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


# env vars
#export CDPATH=".:~/:~/dev"
export INPUTRC="/etc/inputrc"
export EDITOR="emacs"
export VISUAL="emacs"
export PAGER="less"
export BROWSER="firefox"
export LANG=en_US.UTF-8
export LC_ALL="en_US.UTF-8"


# colors for: console, ls, grep, less, man
eval `dircolors -b`
# display grep matches in a color
export GREP_COLOR="1;33"
# For colorful man pages
export LESS_TERMCAP_mb=$'\E[01;31m'
export LESS_TERMCAP_md=$'\E[01;31m'
export LESS_TERMCAP_me=$'\E[0m'
export LESS_TERMCAP_se=$'\E[0m'
export LESS_TERMCAP_so=$'\E[01;44;33m'
export LESS_TERMCAP_ue=$'\E[0m'
export LESS_TERMCAP_us=$'\E[01;32m'


# Don't clear the screen after quitting a `man` page.
export MANPAGER="less -X"

# start/attach screen session after logging in via ssh
#if [ -n "$SSH_CONNECTION" ] && [ -z "$SCREEN_EXIST" ] && [ "$TERM" != "screen" ] ; then
#  export SCREEN_EXIST=1
#  screen -DR
#fi



if [ -f ~/.bashrc.local ]; then
    . ~/.bashrc.local
fi


# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

#
# create temporary scratch directory [inspired by http://ku1ik.com/2012/05/04/scratch-dir.html]
#
export SCRATCH_HOME="$HOME/scratch"
export SCRATCH_TEMP="/private/tmp/scratch-"
[[ -h $SCRATCH_HOME && ! -d $SCRATCH_HOME ]] && rm $SCRATCH_HOME     # delete scratch link if /tmp scratch folder doesn't exist anymore
function scratch_new {
  export SCRATCH_TEMP="/private/tmp/scratch-`date +'%s'`/scratch"    # scratch folder with timestamp within /tmp. will be deleted after system reboot
  mkdir -p $SCRATCH_TEMP                                             # create scratch folder
  ln -nfs $SCRATCH_TEMP $SCRATCH_HOME                                # symlink to scratch folder
  cd $SCRATCH_HOME                                                   # cd into scratch folder
}

function scratch_into {
  if [ -h "$SCRATCH_HOME" ]; then                                    # if symbolic link to SCRATCH_HOME exists
    cd $SCRATCH_HOME
  else
    scratch_new
  fi
}

function scratch_go {                                                # setup a temporary go environment
  if [ -d "src" ] && [ -d "pkg" ] && [ -d "bin" ]; then
    export GOPATH=`pwd`
    export GOBIN="$GOPATH/bin"
    export PATH="$PATH:$GOBIN"
  fi
}

alias s="scratch_into"                                               # cd into current scratch folder or create a new one
alias sn="scratch_new"                                               # new empty scratch folder
alias sg="scratch_go"

#
# start a tiny web server in a separate tmux pane serving the current directory (see ~/bin/www-server)
#
function www {
  if [ -n "$TMUX" ]; then
    tmux splitw -v -p 10 "www-server $@";
    tmux selectp -t 1;
  else
    www-server "$@";
  fi
}


#
# run arbitrary command in separate tmux pane
#
# EXAMPLE
#
#   > _ htop
#   > _ sass --watch .:.
#
function _ {
  tmux splitw -v -p 15 "$@";
  tmux selectp -t 1;
}


# show all the names (CNs and SANs) listed in the SSL certificate for a given domain
function certnames {
  if [ -z "${1}" ]; then
    echo "ERROR: No domain specified."
    return 1
  fi

  local domain="${1}"
  echo "testing ${domain} ..."
  echo # newline

  local tmp=$(echo -e "GET / HTTP/1.0\nEOT" | openssl s_client -connect "${domain}:443" 2>&1);

  if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
    local certText=$(echo "${tmp}" | openssl x509 -text -certopt "no_header, no_serial, no_version, no_signame, no_validity, no_issuer, no_pubkey, no_sigdump, no_aux");
    echo "Common Name:"
    echo # newline
    echo "  ${certText}" | grep "Subject:" | sed -e "s/^.*CN=//";
    echo # newline
    echo "Subject Alternative Name(s):"
    echo # newline
    echo "  ${certText}" | grep -A 1 "Subject Alternative Name:" | sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2
    return 0
  else
    echo "ERROR: Certificate not found.";
    return 1
  fi
}

# direnv hook
if command -v direnv &> /dev/null; then
  eval "$(direnv hook bash)"
fi
