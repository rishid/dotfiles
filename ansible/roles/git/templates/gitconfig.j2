; {{ ansible_managed }}

[user]
    name = {{ full_name }}
    email = {{ github_email }}

[github]
    user = {{ github_user }}

{% if ansible_os_family == 'Darwin' %}
[credential]
    helper = osxkeychain
{% endif %}

[core]
    autocrlf = input
    editor = emacs
    excludesfile = ~/.gitignore_global

[alias]
    a = add
    aa = add --all
    ap = add --patch
    patch = add --patch
    amend = commit --amend

    br = branch
    new-branch = checkout -b
    rename-branch = branch -m
    delete-branch = branch -D
    branches = "!git branch | ag -v '(staging|master)'"
    recent-branches = branch -a --sort=committerdate

    prestage = diff -w
    precommit = diff -w --cached
    tags = tag
    stashes = stash list
    remotes = remote -v

    c = checkout
    co = checkout
    move = mv
    remove = rm
    unmerged = branch --no-merged
    unstash = stash pop
    what = show
    show-last = show HEAD
    untrack = rm -r --cached

    tuck = stash save -u
    untuck = stash pop "stash@{0}"

    current-branch = rev-parse --abbrev-ref HEAD

    ci = commit -v
    d = diff
    st = status

    wip = commit --no-verify -am "WIP"

    standup = !git log --since yesterday --pretty=short --author `git config user.email`

    aliases = !git config --get-regexp ^alias\\. | sed -e s/^alias\\.// -e s/\\ /\\:\\ /
    branches = for-each-ref --sort=-committerdate --format=\"%(color:blue)%(authordate:relative)\t%(color:red)%(authorname)\t%(color:white)%(color:bold)%(refname:short)\" refs/remotes

    # Find commits by source code.
    cc = "!f() { \
        git log --pretty=custom --decorate --date=short -S\"$1\"; \
}; f"

   # Find commits by commit message.
    cm = "!f() { \
        git log --pretty=custom --decorate --date=short --grep=\"$1\"; \
}; f"

    last = log -n 10
    whois = "!sh -c 'git log -i -1 --pretty=\"format:%an <%ae>\n\" --author=\"$1\"' -"
    rmtag = "!sh -c 'git tag -d $1; git push origin :refs/tags/$1'"

    lg = log --graph --pretty=format:'%C(yellow)%h%Creset -%Cred%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative

    # Show word diff instead of line diff
    wdiff = diff --word-diff=color

    # Show diff of what was last stashed (via git stash)
    stashdiff = stash show -p -w stash@{0}

    # http://gggritso.com/human-git-aliases
    unstage = reset -q HEAD --
    discard = checkout --
    uncommit = reset --mixed HEAD~
    save = commit -m

    # Remove the tag with the specified tag name if exists and tag the latest commit with that name.
    retag = "!f() { \
        git tag -d "$1" &> /dev/null; \
        git tag $1; \
}; f"

    # diff-so-fancy
    # https://github.com/so-fancy/diff-so-fancy/#usage
    df = "!f() { [ -z \"$GIT_PREFIX\" ] || cd \"$GIT_PREFIX\" && git diff --color \"$@\" | diff-so-fancy  | less --tabs=4 -RFX; }; f"
    dfs = df --staged
    # Get changes for a single commit
    dfc = "!dfc() { git df $1^ $1; }; dfc"

    please = push --force-with-lease
    publish = "!git push -u origin $(git rev-parse --abbrev-ref HEAD)"
    # publish current branch
    publish = "!f() { git push -u ${1:-origin} $(git rev-parse --abbrev-ref HEAD); }; f"

    remote-branches = "!f() { git ls-remote --heads ${1:origin} | sed 's?.*refs/heads/??'; }; f "

    git = !exec git # Allow `$ git git git...`

[color]
    diff = auto
    status = auto
    branch = auto
    ui = true

[apply]
    whitespace = nowarn
[mergetool]
    keepBackup = false
[difftool]
    prompt = false
[push]
    default = simple
    # Make `git push` automatically push relevant
    # annotated tags when pushing branches out.
    followTags = true
[diff "bin"]
    # Use `hexdump` to diff binary files.
    textconv = hexdump -v -

[format]
    pretty = %Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset
    graph = true

[pretty]
    custom = "%C(magenta)%h%C(red)%d %C(yellow)%ar %C(green)%s %C(yellow)(%an)"
    #                     │        │            │            │             └─ author name
    #                     │        │            │            └─ message
    #                     │        │            └─ date (relative)
    #                     │        └─ decorations (branch, heads or tags)
    #                     └─ hash (abbreviated)

[log]
    abbrevCommit = true

{% if git_signing_key %}
[commit]
    gpgsign = true
{% endif %}

# URL shorthands
# gh:paulmillr/dotfiles
[url "git@github.com:"]
  insteadOf = "gh:"
  pushInsteadOf = "gh:"
  pushInsteadOf = "git://github.com/"
