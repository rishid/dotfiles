# -*- mode:shell-script; sh-shell:bash -*-
# ~/.bashrc
# Rishi Dhupar
# sources of this chaos:
# http://github.com/axedcode/dotfiles/blob/master/.bashrc

#-----------
# PATH
#-----------
USER_PATH=~/bin
LOCAL_PATH=~/localbin
export PATH=$LOCAL_PATH:$USER_PATH:$PATH
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib

# source: http://superuser.com/a/1001014/148993
# is $1 missing from $2 (or PATH) ?
no_path() {
    eval "case :\$${2-PATH}: in *:$1:*) return 1;; *) return 0;; esac"
}
# if $1 exists and is not in path, append it
add_path () {
  [ -d ${1:-.} ] && no_path $* && eval ${2:-PATH}="\$${2:-PATH}:$1"
}
# if $1 exists and is not in path, prepend it
pre_path () {
  [ -d ${1:-.} ] && no_path $* && eval ${2:-PATH}="$1:\$${2:-PATH}"
}
# if $1 is in path, remove it
del_path () {
  no_path $* || eval ${2:-PATH}=`eval echo :'$'${2:-PATH}: |
    sed -e "s;:$1:;:;g" -e "s;^:;;" -e "s;:\$;;"`
}

# list all folders in PATH environment variable more readable (non existent folders in red)
function paths {
  IFS=$':'
  for i in $PATH; do if [ -d $(eval echo $i) ]; then echo $i; else echo -e "\033[0;31m$i\033[0m"; fi; done;
  unset IFS
}

#-----------
# completion
#-----------
# Make sure bash-completion is activated

# File ignore
export FIGNORE=CVS:.svn:.git

if [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
fi

#-----------
#  history
#-----------
export HISTSIZE=100000
export HISTFILESIZE=$HISTSIZE
export HISTFILE=~/.bash_history
export HISTIGNORE="&:[bf]g:c:clear:history:exit:q:afk:pwd:* --help"

# append to HISTFILE when command is typed
shopt -s histappend
# Save all lines of a multiple-line command in the same history entry.
shopt -s cmdhist
export HISTCONTROL="ignoreboth"
export HISTTIMEFORMAT="%F %T "

#-------
# prompt
#-------
export PS1="[\[\033[36m\]\u\[\033[37m\]@\[\033[32m\]\h:\[\033[34;1m\]\w\[\033[m\]]$ "

# Save and reload the history after each command finishes
#export PROMPT_COMMAND="history -a; history -c; history -r; $PROMPT_COMMAND"

#if [ -z "$PROMPT_COMMAND" ]; then
#    export PROMPT_COMMAND="history -a";
#else
#    export PROMPT_COMMAND="$PROMPT_COMMAND;history -a";
#fi

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# shell options
# https://www.gnu.org/software/bash/manual/bashref.html#The-Shopt-Builtin

# Automatically prepend `cd` to directory names.
shopt -s autocd
# Autocorrect typos in path names when using the `cd` command.
shopt -s cdspell
# Check the window size after each command and, if necessary, update
# the values of `LINES` and `COLUMNS`.
shopt -s checkwinsize
# Argument to cd builtin command that is not a directory is assumed to be the name
# of a variable whose value is the directory to change to.
shopt -s cdable_vars
# Include filenames beginning with a "." in the filename expansion.
shopt -s dotglob
# Use extended pattern matching features.
shopt -s extglob
# Do not attempt to search the PATH for possible completions when
# completion is attempted on an empty line.
shopt -s no_empty_cmd_completion

shopt -s expand_aliases

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


# env vars
#export CDPATH=".:~/:~/dev"
export INPUTRC="/etc/inputrc"
export EDITOR="emacs"
export VISUAL="emacs"
export PAGER="less"
export BROWSER="firefox"
export LANG=en_US.UTF-8
export LC_ALL="en_US.UTF-8"


# colors for: console, ls, grep, less, man
eval `dircolors -b`
# display grep matches in a color
export GREP_COLOR="1;33"
# For colorful man pages
export LESS_TERMCAP_mb=$'\E[01;31m'
export LESS_TERMCAP_md=$'\E[01;31m'
export LESS_TERMCAP_me=$'\E[0m'
export LESS_TERMCAP_se=$'\E[0m'
export LESS_TERMCAP_so=$'\E[01;44;33m'
export LESS_TERMCAP_ue=$'\E[0m'
export LESS_TERMCAP_us=$'\E[01;32m'


# Don't clear the screen after quitting a `man` page.
export MANPAGER="less -X"

# start/attach screen session after logging in via ssh
#if [ -n "$SSH_CONNECTION" ] && [ -z "$SCREEN_EXIST" ] && [ "$TERM" != "screen" ] ; then
#  export SCREEN_EXIST=1
#  screen -DR
#fi

#-----------
#  aliases
#-----------
# Always use color output for `ls`
alias ls="ls --color=auto -h"
# List only directories
alias lsd="ls -lF | grep --color=never '^d'"
# List all files colorized in long format
alias ll="ls -lhF --color=auto"
# List all files colorized in long format, including dot files
alias lla="ls -lhaF --color=auto"

alias ln="ln -v"
alias shred="shred -fuvz"
#alias nano="nano -AOSWx"
alias cp="cp -rpv"
alias mv="mv -v"
alias rm="rm -v"
alias mkdir="mkdir -pv"
alias df="df -h"
alias du="du -hc"
alias free="free -m"
# Always enable colored `grep` output
alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'
alias wget="wget -c"
alias exit="clear; exit"

# aliases: navigation
alias ~="cd && clear"
alias home="~"
alias -- -="cd -"
alias cd..="cd .."
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'
alias ......='cd ../../../../..'

# aliases: custom
alias e="$EDITOR"
alias h='history -i 1 | less +G'
alias bashrc="source ~/.bashrc"
# copy last downloaded file from ~/Downloads directory to current directory
alias lastDownload='cp ~/Downloads/`ls ~/Downloads -tr | tail -n 1` .'

# Pretty print the path
alias path='printf "%b\n" "${PATH//:/\\n}"'

# Stopwatch
alias timer='echo "Timer started. Stop with Ctrl-D." && date && time cat && date'

# Lock screen.
alias afk="gnome-screensaver-command --lock"

# Shorter commands for the `Advanced Packaging Tool`
alias apti="sudo apt-get install"
alias aptr="sudo apt-get remove"
alias apts="sudo apt-cache search"
alias aptu="sudo apt-get update && sudo apt-get upgrade"


if [ -f ~/.bashrc.local ]; then
    . ~/.bashrc.local
fi

# make a directory then cd into it
function mkcd() { mkdir -p "$1" && cd "$1"; }

# recursively set ownership
function mkmine() { sudo chown -R ${USER} ${1:-.}; }

# simple calculator
function calc() { echo "$*" | bc; }

# make a tar.gz
function mktar() { tar cvzpf "${1%%/}.tar.gz" "${1%%/}/"; }

# sort a directory's used space and displays total gigabytes
dusort() { sudo \du -x -B 1048576 $1 | sort -rn | head -n10; }

# extract different archives automatically
extract () {
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2)   tar xvjf $1   ;;
      *.tar.gz)    tar xvzf $1   ;;
      *.bz2)       bunzip2 $1    ;;
      *.gz)        gunzip $1     ;;
      *.tar)       tar xf $1     ;;
      *.tbz2)      tar xjf $1    ;;
      *.tgz)       tar xzf $1    ;;
      *.zip)       unzip $1      ;;
      *.Z)         uncompress $1 ;;
      *.rar)       7z x $1       ;;
      *.7z)        7z x $1       ;;
      *)           echo "'$1' cannot be extracted via extract()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi }

# packs $2-$n into $1 depending on $1's extension.  add more file types as needed
function pack() {
	 if [ $# -lt 2 ] ; then
	    echo -e "\npack() usage:"
	    echo -e "\tpack archive_file_name file1 file2 ... fileN"
	    echo -e "\tcreates archive of files 1-N\n"
	 else
	   DEST=$1
	   shift

	   case $DEST in
		*.tar.bz2)		tar -cvjf $DEST "$@" ;;
		*.tar.gz)		tar -cvzf $DEST "$@" ;;
		*.zip)			zip -r $DEST "$@" ;;
		*.xpi)			zip -r $DEST "$@" ;;
		*)				echo "Unknown file type - $DEST" ;;
	   esac
	 fi
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# like sleep, but spits out a . every second
function delay() {
	 typeset -i NUM
	 NUM=$1
	 if [ $NUM -gt 0 ] ; then
	     for i in `seq $NUM` ; do sleep 1 ; echo -n '.' ; done
	     echo ""
	 else
	     echo "Invalid argument.  Please use a positive integer."
	 fi
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# screen attach.  if multiple, presents a menu for choosing.
function ssx() {
    OPTS=`screen -ls | grep "[0-9]\." | while read line ; do echo "$line" | sed -e 's/\s/_/g' ; done`

    case $(echo $OPTS | wc -w) in
	0)
	    echo -e "\nNo screen sessions open\n"
	    ;;
	1)
	    SESSION=$OPTS
	    echo -e "\nAttaching to only available screen"
	    ;;
	*)
	    echo -e "\nPick a screen session"
	    select opt in $OPTS ; do
		SESSION=$opt
		break;
	    done
	    ;;
    esac

    screen -x $(echo $SESSION | sed -e 's/\..*//')
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Human readable file size
# (because `du -h` doesn't cut it for me).
function hrfs() {
    printf "%s" "$1" |
    awk '{
            i = 1;
            split("B KB MB GB TB PB EB ZB YB WTFB", v);
            value = $1;
            # confirm that the input is a number
            if ( value + .0 == value ) {
                while ( value >= 1024 ) {
                    value/=1024;
                    i++;
                }
                if ( value == int(value) ) {
                    printf "%d %s", value, v[i]
                } else {
                    printf "%.1f %s", value, v[i]
                }
            }
        }' |
    sed -e ":l" \
        -e "s/\([0-9]\)\([0-9]\{3\}\)/\1,\2/; t l"
    #    └─ add thousands separator
    #       (changes "1023.2 KB" to "1,023.2 KB")
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Search history.
function qh() {
    #           ┌─ enable colors for pipe
    #           │  ("--color=auto" enables colors only if
    #           │  the output is in the terminal)
    grep --color=always "$*" "$HISTFILE" |       less -RX
    # display ANSI color escape sequences in raw form ─┘│
    #       don't clear the screen after quitting less ─┘
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

#
# create temporary scratch directory [inspired by http://ku1ik.com/2012/05/04/scratch-dir.html]
#
export SCRATCH_HOME="$HOME/scratch"
export SCRATCH_TEMP="/private/tmp/scratch-"
[[ -h $SCRATCH_HOME && ! -d $SCRATCH_HOME ]] && rm $SCRATCH_HOME     # delete scratch link if /tmp scratch folder doesn't exist anymore
function scratch_new {
  export SCRATCH_TEMP="/private/tmp/scratch-`date +'%s'`/scratch"    # scratch folder with timestamp within /tmp. will be deleted after system reboot
  mkdir -p $SCRATCH_TEMP                                             # create scratch folder
  ln -nfs $SCRATCH_TEMP $SCRATCH_HOME                                # symlink to scratch folder
  cd $SCRATCH_HOME                                                   # cd into scratch folder
}

function scratch_into {
  if [ -h "$SCRATCH_HOME" ]; then                                    # if symbolic link to SCRATCH_HOME exists
    cd $SCRATCH_HOME
  else
    scratch_new
  fi
}

function scratch_go {                                                # setup a temporary go environment
  if [ -d "src" ] && [ -d "pkg" ] && [ -d "bin" ]; then
    export GOPATH=`pwd`
    export GOBIN="$GOPATH/bin"
    export PATH="$PATH:$GOBIN"
  fi
}

alias s="scratch_into"                                               # cd into current scratch folder or create a new one
alias sn="scratch_new"                                               # new empty scratch folder
alias sg="scratch_go"

#
# start a tiny web server in a separate tmux pane serving the current directory (see ~/bin/www-server)
#
function www {
  if [ -n "$TMUX" ]; then
    tmux splitw -v -p 10 "www-server $@";
    tmux selectp -t 1;
  else
    www-server "$@";
  fi
}


#
# run arbitrary command in separate tmux pane
#
# EXAMPLE
#
#   > _ htop
#   > _ sass --watch .:.
#
function _ {
  tmux splitw -v -p 15 "$@";
  tmux selectp -t 1;
}


# show all the names (CNs and SANs) listed in the SSL certificate for a given domain
function certnames {
  if [ -z "${1}" ]; then
    echo "ERROR: No domain specified."
    return 1
  fi

  local domain="${1}"
  echo "testing ${domain} ..."
  echo # newline

  local tmp=$(echo -e "GET / HTTP/1.0\nEOT" | openssl s_client -connect "${domain}:443" 2>&1);

  if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
    local certText=$(echo "${tmp}" | openssl x509 -text -certopt "no_header, no_serial, no_version, no_signame, no_validity, no_issuer, no_pubkey, no_sigdump, no_aux");
    echo "Common Name:"
    echo # newline
    echo "  ${certText}" | grep "Subject:" | sed -e "s/^.*CN=//";
    echo # newline
    echo "Subject Alternative Name(s):"
    echo # newline
    echo "  ${certText}" | grep -A 1 "Subject Alternative Name:" | sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2
    return 0
  else
    echo "ERROR: Certificate not found.";
    return 1
  fi
}

