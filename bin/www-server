#!/usr/bin/env python2.7

'''start a local http-server serving files from the current directory
'''
import sys
import signal
import BaseHTTPServer
import SimpleHTTPServer
import socket

default_host = '127.0.0.1'
default_port = 8000

def next_open_port(port):
    '''try to find the next open port by recursive checks
    '''
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    try:
        s.bind((default_host, port))
        s.close()
    except socket.error as e:
        if e.errno == 48:
            s.close()
            port = next_open_port(port + 1)

    return port

def trap_sigint():
    '''exit on interrupt (Ctrl-C)
    '''
    signal.signal(signal.SIGINT, lambda *args: sys.exit(1))

class MyHTTPRequestHandler(SimpleHTTPServer.SimpleHTTPRequestHandler):

    def end_headers(self):
        self.send_my_headers()
        SimpleHTTPServer.SimpleHTTPRequestHandler.end_headers(self)

    def send_my_headers(self):
        '''set no caching headers
        '''
        self.send_header('CacheControl', 'no-cache, no-store, must-revalidate')
        self.send_header('Pragma', 'no-cache')
        self.send_header('Expires', '0')

def main():
    trap_sigint()
    if sys.argv[1:]:
        port = int(sys.argv[1])
    else:
        port = default_port
    port = next_open_port(port)
    ServerClass  = BaseHTTPServer.HTTPServer
    httpd = ServerClass((default_host, port), MyHTTPRequestHandler)

    sa = httpd.socket.getsockname()
    print "Serving HTTP on http://{0}:{1}".format(sa[0], sa[1])

    httpd.serve_forever()

if __name__ == '__main__':
    main()

# vim:ft=python
