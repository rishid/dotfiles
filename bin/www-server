#!/usr/bin/env python3

'''Start a local HTTP server serving files from the current directory
'''

import sys
import signal
import http.server
import socket
import argparse

DEFAULT_PORT = 8000

def find_next_open_port(port):
    '''Try to find the next open port by recursive checks
    '''
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        try:
            s.bind(('0.0.0.0', port))
        except OSError as e:
            if e.errno == 48:  # Address already in use
                return find_next_open_port(port + 1)
            raise
    return port

def sigint_handler(sig, frame):
    print("\nReceived Ctrl+C. Exiting.")
    sys.exit(1)

class MyHTTPRequestHandler(http.server.SimpleHTTPRequestHandler):

    def end_headers(self):
        self.send_my_headers()
        super().end_headers()

    def send_my_headers(self):
        '''Set no caching headers
        '''
        self.send_header('Cache-Control', 'no-cache, no-store, must-revalidate')
        self.send_header('Pragma', 'no-cache')
        self.send_header('Expires', '0')

def main():
    parser = argparse.ArgumentParser(description='Start a local HTTP server serving files from the current directory.')
    parser.add_argument('--port', type=int, help='Port to listen on (default is 8000)')
    args = parser.parse_args()

    signal.signal(signal.SIGINT, sigint_handler)
    
    port = args.port if args.port else DEFAULT_PORT
    port = find_next_open_port(port)
    
    ServerClass = http.server.HTTPServer
    httpd = ServerClass(("127.0.0.1", port), MyHTTPRequestHandler)

    sa = httpd.socket.getsockname()
    print(f"Serving HTTP on http://{sa[0]}:{sa[1]}")

    try:
        httpd.serve_forever()
    except KeyboardInterrupt:
        print("\nServer stopped.")

if __name__ == '__main__':
    main()
